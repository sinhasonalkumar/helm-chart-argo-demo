apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.serviceName }}
  name: {{ .Values.serviceName }}
  namespace: {{ .Values.enviroment }}-{{ .Values.domain }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.serviceName }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.serviceName }}
    spec:
      # affinity:
      #   podAntiAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #     - labelSelector:
      #         matchExpressions:
      #         - key: app
      #           operator: In
      #           values:
      #           - {{ .Values.serviceName }}
      #       topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: initMicroService
        image: {{ .Values.initContainer.image }}
        args: [/bin/sh, -c, 'wget -O /app-configs/application.properties {{ .Values.configRepository }}/{{ .Values.configRepositoryBranchOrTag }}/defaults/application.properties && wget -O /app-configs/application-dev.properties https://raw.githubusercontent.com/sinhasonalkumar/sp-micro-service-config-argo-demo/main/overrides/application-{{ .Values.enviroment }}.properties']
        volumeMounts:
        - name: workdir
          mountPath: "/app-configs"
      containers:
      - image: sinhasonalkumar/{{ .Values.serviceName }}:{{ .Values.imageVersion }}
        imagePullPolicy: {{ .Values.imageVersion }}
        name: {{ .Values.serviceName }}
        ports:
        - containerPort: {{ .Values.port }}
        env:
        - name: JAVA_TOOL_OPTIONS
          value: {{ .Values.jvmArgs }}
        - name: "spring.config.location"
          value: "/app-configs/"
        - name: "spring.profiles.active"
          value: {{ .Values.enviroment }}
        resources:
          requests:
            memory: {{ .Values.resources.requests.memory }}
          limits:
            memory: {{ .Values.resources.requests.memory }}
        readinessProbe:
            httpGet:
              path: {{ .Values.healthCheckURI }}
              port: {{ .Values.healthCheckPort }}
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 2
            failureThreshold: 4
        livenessProbe:
          httpGet:
            path: {{ .Values.healthCheckURI }}
            port: {{ .Values.healthCheckPort }}
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 4
        volumeMounts:
        - name: workdir
          mountPath: "/app-configs"
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - name: workdir
        emptyDir: {}